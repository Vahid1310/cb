
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parse;

import absyn.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\003\007" +
    "\000\002\003\007\000\002\004\011\000\002\004\012\000" +
    "\002\006\005\000\002\007\006\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\002\000" +
    "\002\011\007\000\002\012\006\000\002\013\010\000\002" +
    "\013\010\000\002\014\007\000\002\015\005\000\002\015" +
    "\006\000\002\016\006\000\002\016\007\000\002\017\003" +
    "\000\002\017\005\000\002\030\011\000\002\031\015\000" +
    "\002\031\011\000\002\026\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\021\005\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\023\003\000\002\023" +
    "\004\000\002\024\003\000\002\024\004\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\006\006\006\020\010\001\002\000\004\002" +
    "\211\001\002\000\010\002\000\006\006\020\010\001\002" +
    "\000\004\007\027\001\002\000\010\002\ufffd\006\006\020" +
    "\010\001\002\000\004\007\011\001\002\000\004\042\012" +
    "\001\002\000\006\004\015\007\013\001\002\000\004\021" +
    "\025\001\002\000\004\021\024\001\002\000\004\014\016" +
    "\001\002\000\004\034\017\001\002\000\004\015\020\001" +
    "\002\000\004\024\021\001\002\000\006\004\015\007\022" +
    "\001\002\000\004\021\uffe9\001\002\000\004\021\uffe8\001" +
    "\002\000\010\002\ufffb\006\ufffb\020\ufffb\001\002\000\010" +
    "\002\ufffc\006\ufffc\020\ufffc\001\002\000\004\002\ufffe\001" +
    "\002\000\004\010\030\001\002\000\010\007\033\011\031" +
    "\023\032\001\002\000\004\012\205\001\002\000\004\007" +
    "\202\001\002\000\004\017\200\001\002\000\006\011\ufff3" +
    "\025\176\001\002\000\006\011\ufff4\025\174\001\002\000" +
    "\004\011\037\001\002\000\004\012\040\001\002\000\014" +
    "\005\050\007\043\013\uffec\016\047\030\042\001\002\000" +
    "\014\005\050\007\043\013\uffec\016\047\030\042\001\002" +
    "\000\004\010\165\001\002\000\010\010\146\014\074\022" +
    "\147\001\002\000\014\005\050\007\043\013\uffec\016\047" +
    "\030\042\001\002\000\014\005\050\007\043\013\uffec\016" +
    "\047\030\042\001\002\000\004\013\142\001\002\000\004" +
    "\007\136\001\002\000\004\010\057\001\002\000\014\005" +
    "\050\007\043\013\uffec\016\047\030\042\001\002\000\014" +
    "\005\050\007\043\013\uffec\016\047\030\042\001\002\000" +
    "\014\005\050\007\043\013\uffec\016\047\030\042\001\002" +
    "\000\004\013\uffed\001\002\000\004\013\ufff1\001\002\000" +
    "\004\013\uffee\001\002\000\014\007\061\010\071\027\066" +
    "\031\060\034\063\001\002\000\012\007\uffc8\027\uffc8\031" +
    "\uffc8\034\uffc8\001\002\000\040\011\uffca\014\uffca\015\uffca" +
    "\021\uffca\025\uffca\027\uffca\031\uffca\032\uffca\033\uffca\035" +
    "\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001\002" +
    "\000\012\007\135\027\066\031\060\034\063\001\002\000" +
    "\036\011\uffcc\015\uffcc\021\uffcc\025\uffcc\027\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\001\002\000\036\011\uffd3\015\uffd3\021\uffd3" +
    "\025\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\036" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002\000\004" +
    "\011\123\001\002\000\012\007\uffc7\027\uffc7\031\uffc7\034" +
    "\uffc7\001\002\000\036\011\uffcf\015\uffcf\021\uffcf\025\uffcf" +
    "\027\uffcf\031\uffcf\032\117\033\120\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\001\002\000\032\011\uffd6" +
    "\015\uffd6\021\uffd6\025\uffd6\027\113\031\114\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\001\002\000\014" +
    "\007\061\010\071\027\066\031\060\034\063\001\002\000" +
    "\016\035\105\036\103\037\102\040\107\041\104\042\101" +
    "\001\002\000\040\011\uffd2\014\074\015\uffd2\021\uffd2\025" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\001\002\000\014\007" +
    "\061\010\071\027\066\031\060\034\063\001\002\000\036" +
    "\011\uffd1\015\uffd1\021\uffd1\025\uffd1\027\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\001\002\000\004\015\077\001\002\000\042\011" +
    "\uffe6\014\074\015\uffe6\021\uffe6\022\uffe6\025\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\001\002\000\040\011\uffe5\015\uffe5" +
    "\021\uffe5\022\uffe5\025\uffe5\027\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\001\002\000\014\007\uffdc\010\uffdc\027\uffdc\031\uffdc\034" +
    "\uffdc\001\002\000\014\007\uffd9\010\uffd9\027\uffd9\031\uffd9" +
    "\034\uffd9\001\002\000\014\007\uffda\010\uffda\027\uffda\031" +
    "\uffda\034\uffda\001\002\000\014\007\uffd7\010\uffd7\027\uffd7" +
    "\031\uffd7\034\uffd7\001\002\000\014\007\uffdb\010\uffdb\027" +
    "\uffdb\031\uffdb\034\uffdb\001\002\000\014\007\061\010\071" +
    "\027\066\031\060\034\063\001\002\000\014\007\uffd8\010" +
    "\uffd8\027\uffd8\031\uffd8\034\uffd8\001\002\000\004\011\uffdd" +
    "\001\002\000\004\011\112\001\002\000\036\011\uffd0\015" +
    "\uffd0\021\uffd0\025\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\001" +
    "\002\000\014\007\061\010\071\027\066\031\060\034\063" +
    "\001\002\000\014\007\061\010\071\027\066\031\060\034" +
    "\063\001\002\000\026\011\uffd4\015\uffd4\021\uffd4\025\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001" +
    "\002\000\026\011\uffd5\015\uffd5\021\uffd5\025\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000" +
    "\014\007\061\010\071\027\066\031\060\034\063\001\002" +
    "\000\014\007\061\010\071\027\066\031\060\034\063\001" +
    "\002\000\032\011\uffcd\015\uffcd\021\uffcd\025\uffcd\027\uffcd" +
    "\031\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\001\002\000\032\011\uffce\015\uffce\021\uffce\025\uffce" +
    "\027\uffce\031\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\001\002\000\004\012\124\001\002\000\014" +
    "\005\050\007\043\013\uffec\016\047\030\042\001\002\000" +
    "\004\013\126\001\002\000\016\005\uffde\007\uffde\013\uffde" +
    "\016\uffde\026\127\030\uffde\001\002\000\004\012\130\001" +
    "\002\000\014\005\050\007\043\013\uffec\016\047\030\042" +
    "\001\002\000\004\013\132\001\002\000\014\005\uffdf\007" +
    "\uffdf\013\uffdf\016\uffdf\030\uffdf\001\002\000\010\027\066" +
    "\031\060\034\063\001\002\000\036\011\uffcb\015\uffcb\021" +
    "\uffcb\025\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\001\002\000" +
    "\040\011\uffc9\014\uffc9\015\uffc9\021\uffc9\025\uffc9\027\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\001\002\000\004\017\137\001\002" +
    "\000\014\007\061\010\071\027\066\031\060\034\063\001" +
    "\002\000\004\021\141\001\002\000\014\005\uffeb\007\uffeb" +
    "\013\uffeb\016\uffeb\030\uffeb\001\002\000\010\002\ufff9\006" +
    "\ufff9\020\ufff9\001\002\000\004\013\ufff2\001\002\000\004" +
    "\013\uffef\001\002\000\004\022\162\001\002\000\016\007" +
    "\061\010\071\011\152\027\066\031\060\034\063\001\002" +
    "\000\014\007\061\010\071\027\066\031\060\034\063\001" +
    "\002\000\004\021\151\001\002\000\014\005\uffea\007\uffea" +
    "\013\uffea\016\uffea\030\uffea\001\002\000\004\021\161\001" +
    "\002\000\006\011\uffe2\025\157\001\002\000\004\011\155" +
    "\001\002\000\004\021\156\001\002\000\014\005\uffe3\007" +
    "\uffe3\013\uffe3\016\uffe3\030\uffe3\001\002\000\014\007\061" +
    "\010\071\027\066\031\060\034\063\001\002\000\004\011" +
    "\uffe1\001\002\000\014\005\uffe4\007\uffe4\013\uffe4\016\uffe4" +
    "\030\uffe4\001\002\000\014\007\061\010\071\027\066\031" +
    "\060\034\063\001\002\000\004\021\164\001\002\000\014" +
    "\005\uffe7\007\uffe7\013\uffe7\016\uffe7\030\uffe7\001\002\000" +
    "\014\007\061\010\071\027\066\031\060\034\063\001\002" +
    "\000\004\011\167\001\002\000\004\012\170\001\002\000" +
    "\014\005\050\007\043\013\uffec\016\047\030\042\001\002" +
    "\000\004\013\172\001\002\000\014\005\uffe0\007\uffe0\013" +
    "\uffe0\016\uffe0\030\uffe0\001\002\000\004\013\ufff0\001\002" +
    "\000\006\007\033\023\032\001\002\000\004\011\ufff6\001" +
    "\002\000\006\007\033\023\032\001\002\000\004\011\ufff5" +
    "\001\002\000\004\007\201\001\002\000\006\011\ufff8\025" +
    "\ufff8\001\002\000\004\017\203\001\002\000\004\007\204" +
    "\001\002\000\006\011\ufff7\025\ufff7\001\002\000\014\005" +
    "\050\007\043\013\uffec\016\047\030\042\001\002\000\004" +
    "\013\207\001\002\000\010\002\ufffa\006\ufffa\020\ufffa\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\010\002\003\003\004\004\006\001\001\000" +
    "\002\001\001\000\010\002\207\003\004\004\006\001\001" +
    "\000\002\001\001\000\010\002\025\003\004\004\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\034\007\033\010\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\045\011\044\012\040\014\051" +
    "\016\043\030\050\031\052\001\001\000\020\005\172\011" +
    "\044\012\040\014\051\016\043\030\050\031\052\001\001" +
    "\000\002\001\001\000\004\015\144\001\001\000\020\005" +
    "\143\011\044\012\040\014\051\016\043\030\050\031\052" +
    "\001\001\000\020\005\142\011\044\012\040\014\051\016" +
    "\043\030\050\031\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\055\011\044\012" +
    "\040\014\051\016\043\030\050\031\052\001\001\000\020" +
    "\005\054\011\044\012\040\014\051\016\043\030\050\031" +
    "\052\001\001\000\020\005\053\011\044\012\040\014\051" +
    "\016\043\030\050\031\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\071\021\066" +
    "\022\067\023\063\024\072\025\061\026\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\133\025\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\110\021\066\022\067\023\063\024\072\025" +
    "\061\001\001\000\004\027\105\001\001\000\004\015\074" +
    "\001\001\000\016\020\075\021\066\022\067\023\063\024" +
    "\072\025\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\020\107\021\066\022\067\023" +
    "\063\024\072\025\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\115\021\066\022\067\023\063\024\072\025\061\001\001" +
    "\000\016\020\114\021\066\022\067\023\063\024\072\025" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\066\022\121\023\063\024\072\025\061\001\001\000" +
    "\014\021\066\022\120\023\063\024\072\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\005\124\011\044\012\040\014\051\016\043\030\050" +
    "\031\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\130\011\044\012\040\014\051" +
    "\016\043\030\050\031\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\133\025\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\137\021\066\022\067\023\063\024\072\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\153\020\152\021\066\022\067\023\063\024\072\025" +
    "\061\001\001\000\016\020\147\021\066\022\067\023\063" +
    "\024\072\025\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\157\020" +
    "\152\021\066\022\067\023\063\024\072\025\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\162\021" +
    "\066\022\067\023\063\024\072\025\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\071\021\066\022" +
    "\067\023\063\024\072\025\061\026\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\170\011\044\012" +
    "\040\014\051\016\043\030\050\031\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\034\007\033\010\174\001\001\000\002\001\001\000\010" +
    "\006\034\007\033\010\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\205\011\044\012" +
    "\040\014\051\016\043\030\050\031\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= typedef 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= typedef program 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= prochead program 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= prochead 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typedef ::= TYPE IDENT EQ IDENT SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typedef ::= TYPE IDENT EQ arraydec SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("typedef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prochead ::= PROC IDENT LPAREN RPAREN LCURL instructions RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prochead",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prochead ::= PROC IDENT LPAREN procargs RPAREN LCURL instructions RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prochead",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procarg_type ::= IDENT COLON IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procarg_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procarg_ref ::= REF IDENT COLON IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procarg_ref",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procargs ::= procarg_type COMMA procargs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procargs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procargs ::= procarg_ref COMMA procargs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procargs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procargs ::= procarg_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procargs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procargs ::= procarg_ref 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procargs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instructions ::= vardec instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instructions ::= arrayasgn instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instructions ::= varasgn instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instructions ::= proccall instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instructions ::= whileloop instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instructions ::= if_statement instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instructions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardec ::= VAR IDENT COLON math_expression SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vardec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varasgn ::= IDENT ASGN math_expression SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varasgn",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arraydec ::= ARRAY LBRACK INTLIT RBRACK OF IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arraydec ::= ARRAY LBRACK INTLIT RBRACK OF arraydec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arraydec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arrayasgn ::= IDENT arrayindex ASGN math_expression SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayasgn",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arrayindex ::= LBRACK math_expression RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayindex",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arrayindex ::= LBRACK math_expression RBRACK arrayindex 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayindex",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // proccall ::= IDENT LPAREN RPAREN SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccall",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // proccall ::= IDENT LPAREN proccallvars RPAREN SEMIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccall",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // proccallvars ::= math_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccallvars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // proccallvars ::= math_expression COMMA proccallvars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proccallvars",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // whileloop ::= WHILE LPAREN bool_expression RPAREN LCURL instructions RCURL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_statement ::= IF LPAREN bool_expression RPAREN LCURL instructions RCURL ELSE LCURL instructions RCURL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ifStm(Integer) ileft, (Integer) iright, (Exp) t, (Stm) s1,  
                              (Stm) s2 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_statement ::= IF LPAREN bool_expression RPAREN LCURL instructions RCURL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ifStm(Integer) ileft, (Integer) iright, (Exp) t, (Stm) s1 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_expression ::= math_expression logical_operator math_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logical_operator ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // logical_operator ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // logical_operator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // logical_operator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // logical_operator ::= NE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // logical_operator ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // math_expression ::= component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // math_expression ::= component PLUS math_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // math_expression ::= component MINUS math_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("math_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= var arrayindex 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAREN math_expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // component ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // component ::= factor STAR component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // component ::= factor SLASH component 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // number ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // number ::= sign number 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // var ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // var ::= sign IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sign ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sign ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sign",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
